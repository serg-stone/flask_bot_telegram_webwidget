from flask import Flask, request, jsonify
from flask_cors import CORS
import telegram
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler
import json
import logging
import asyncio
import threading
from functions import (
    start, handle_mode_choice, get_name, get_phone, get_service,
    get_date, get_documents, get_comment, cancel, consultation_handler, debug_handler,
    STATE_NAME, STATE_PHONE, STATE_SERVICE, STATE_DATE, STATE_DOCUMENTS, STATE_COMMENT,
    logger, NGROK_URL, save_application_to_sheets, get_assistant_response,
    TELEGRAM_BOT_TOKEN
)

# –°–æ–∑–¥–∞—ë–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤–µ–±-–≤–∏–¥–∂–µ—Ç–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')

# –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π Telegram Application
application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Application
import asyncio
import threading

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π event loop –¥–ª—è Telegram
telegram_loop = None
telegram_thread = None

def run_telegram_loop():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π event loop –¥–ª—è Telegram –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    global telegram_loop
    telegram_loop = asyncio.new_event_loop()
    asyncio.set_event_loop(telegram_loop)
    
    async def init_and_run():
        await application.initialize()
        await application.bot.initialize()
        logger.info("Application –∏ Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º loop")
        # –î–µ—Ä–∂–∏–º loop –æ—Ç–∫—Ä—ã—Ç—ã–º
        while True:
            await asyncio.sleep(1)
    
    try:
        telegram_loop.run_until_complete(init_and_run())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ telegram loop: {e}")

def init_application():
    """–ó–∞–ø—É—Å–∫–∞–µ–º Telegram –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º loop"""
    global telegram_thread
    telegram_thread = threading.Thread(target=run_telegram_loop, daemon=True)
    telegram_thread.start()
    
    # –ñ–¥—ë–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    import time
    time.sleep(2)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler ===
conversation_handler = ConversationHandler(
    entry_points=[
        CommandHandler('start', start),
        MessageHandler(filters.Regex('^(–ë—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å|–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è)$'), handle_mode_choice)
    ],
    states={
        STATE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
        STATE_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
        STATE_SERVICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_service)],
        STATE_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_date)],
        STATE_DOCUMENTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_documents)],
        STATE_COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_comment)],
    },
    fallbacks=[CommandHandler('cancel', cancel)],
    allow_reentry=True
)

# –î–æ–±–∞–≤–ª—è–µ–º handlers –≤ Application
application.add_handler(conversation_handler)
# Consultation handler –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–ï–†–ï–î debug handler
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, consultation_handler))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, debug_handler))

# === Flask Routes ===

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook endpoint –¥–ª—è Telegram"""
    try:
        logger.info('Telegram webhook –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
        data = request.get_json()
        if not data:
            logger.error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ webhook –∑–∞–ø—Ä–æ—Å–µ')
            return 'No data', 400
            
        logger.info(f'Webhook –¥–∞–Ω–Ω—ã–µ: {data}')
        
        # –°–æ–∑–¥–∞—ë–º Update –æ–±—ä–µ–∫—Ç
        update = telegram.Update.de_json(data, application.bot)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º update —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ telegram loop
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π telegram_loop –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
            future = asyncio.run_coroutine_threadsafe(
                application.process_update(update), 
                telegram_loop
            )
            future.result(timeout=10)  # –ñ–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ update: {e}")
        
        logger.info('Update –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ')
        return 'OK', 200
        
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –≤ webhook: {e}', exc_info=True)
        return 'Error', 500

@app.route('/api/chat', methods=['POST'])
def chat_api():
    """API –¥–ª—è –≤–µ–±-–≤–∏–¥–∂–µ—Ç–∞: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ OpenAI Assistant"""
    try:
        data = request.get_json()
        message = data.get('message', '')
        thread_id = data.get('thread_id')
        
        if not message:
            return jsonify({'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400
            
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI Assistant
        answer, new_thread_id = get_assistant_response(message, thread_id, '–í–∏–¥–∂–µ—Ç')
        
        return jsonify({
            'response': answer,
            'thread_id': new_thread_id
        })
        
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ API —á–∞—Ç–∞: {e}')
        return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

@app.route('/api/booking', methods=['POST'])
def booking_api():
    """API –¥–ª—è –≤–µ–±-–≤–∏–¥–∂–µ—Ç–∞: –±—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å –∫ –∞–¥–≤–æ–∫–∞—Ç—É"""
    try:
        data = request.get_json()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['name', 'phone', 'service', 'date']
        for field in required_fields:
            if not data.get(field):
                return jsonify({'error': f'–ü–æ–ª–µ {field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'}), 400
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        booking_data = {
            'name': data.get('name'),
            'phone': data.get('phone'),
            'service': data.get('service'),
            'date': data.get('date'),
            'documents': data.get('documents', ''),
            'comment': data.get('comment', ''),
            'source': '–í–∏–¥–∂–µ—Ç'
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
        result = save_application_to_sheets(booking_data)
        
        if result:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            from functions import send_telegram_notification
            notification_text = (
                f"üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞:\n\n"
                f"üë§ –ò–º—è: {booking_data['name']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {booking_data['phone']}\n"
                f"‚öñÔ∏è –£—Å–ª—É–≥–∞: {booking_data['service']}\n"
                f"üìÖ –î–∞—Ç–∞: {booking_data['date']}\n"
                f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: {booking_data['documents']}\n"
                f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {booking_data['comment']}"
            )
            send_telegram_notification(notification_text, application.bot)
            
            return jsonify({'success': True, 'message': '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'})
        else:
            return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏'}), 500
            
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ API –∑–∞–ø–∏—Å–∏: {e}')
        return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    return jsonify({
        'status': 'OK',
        'service': '–¢–≤–æ—ë –ø—Ä–∞–≤–æ - –ê–¥–≤–æ–∫–∞—Ç—Å–∫–∏–µ —É—Å–ª—É–≥–∏',
        'telegram_bot': '–∞–∫—Ç–∏–≤–µ–Ω',
        'flask_api': '–∞–∫—Ç–∏–≤–µ–Ω'
    })

@app.route('/api/services', methods=['GET'])
def get_services():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥ –¥–ª—è –≤–µ–±-–≤–∏–¥–∂–µ—Ç–∞"""
    from functions import services
    return jsonify({'services': services})

@app.route('/', methods=['GET'])
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return jsonify({
        'message': '–°–µ—Ä–≤–∏—Å "–¢–≤–æ—ë –ø—Ä–∞–≤–æ" - –ê–¥–≤–æ–∫–∞—Ç—Å–∫–∏–µ —É—Å–ª—É–≥–∏',
        'telegram_bot': '@assist_jura_bot',
        'api_endpoints': {
            'chat': '/api/chat',
            'booking': '/api/booking', 
            'services': '/api/services',
            'health': '/health'
        }
    })

# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã '–¢–≤–æ—ë –ø—Ä–∞–≤–æ'...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Application –≥–ª–æ–±–∞–ª—å–Ω–æ
    init_application()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –¥–ª—è Telegram
    try:
        webhook_url = f"{NGROK_URL}/webhook"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π requests –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook
        import requests
        telegram_api_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook"
        response = requests.post(telegram_api_url, data={'url': webhook_url})
        
        if response.status_code == 200:
            logger.info(f"‚úÖ Telegram webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {response.text}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
    logger.info("üåê –ó–∞–ø—É—Å–∫ Flask API —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 5000...")
    logger.info("üì± Telegram –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    logger.info("üåç –í–µ–±-API –≥–æ—Ç–æ–≤ –¥–ª—è –≤–∏–¥–∂–µ—Ç–∞")
    
    app.run(
        host='0.0.0.0',
        port=5000,
        debug=False
    )
