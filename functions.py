import os
import json
import logging
from dotenv import load_dotenv
import pytz
from datetime import datetime

# Google Sheets
from google.oauth2 import service_account
from googleapiclient.discovery import build

# OpenAI Assistant
import openai

# Telegram
from telegram import Bot, Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.error import TelegramError
from telegram.ext import ContextTypes, ConversationHandler

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è FSM ===
(STATE_NAME, STATE_PHONE, STATE_SERVICE, STATE_DATE, STATE_DOCUMENTS, STATE_COMMENT) = range(6)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_GROUP_ID = os.getenv('TELEGRAM_GROUP_ID')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
OPENAI_ASSISTANT_ID = os.getenv('OPENAI_ASSISTANT_ID')
GOOGLE_SHEET_ID = os.getenv('GOOGLE_SHEET_ID')
NGROK_URL = os.getenv('NGROK_URL')

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')
logger = logging.getLogger(__name__)

# === Telegram Bot –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ main.py ===
# bot = Bot(token=TELEGRAM_BOT_TOKEN)  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI ===
openai.api_key = OPENAI_API_KEY

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets ===
GOOGLE_SERVICE_ACCOUNT_FILE = 'assistent-jura-2cef395ce813.json'
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']

try:
    credentials = service_account.Credentials.from_service_account_file(
        GOOGLE_SERVICE_ACCOUNT_FILE, scopes=SCOPES
    )
    sheets_service = build('sheets', 'v4', credentials=credentials)
    sheet = sheets_service.spreadsheets()
    logger.info("Google Sheets API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
    sheet = None

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
main_keyboard = ReplyKeyboardMarkup([
    ["–ë—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å", "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"]
], resize_keyboard=True)

# –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
services = [
    "–ü—Ä–∞–≤–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
    "–í—ã–µ–∑–¥ –∞–¥–≤–æ–∫–∞—Ç–∞ –∫ –∫–ª–∏–µ–Ω—Ç—É", 
    "–ü–∏—Å—å–º–µ–Ω–Ω–æ–µ –ø—Ä–∞–≤–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ",
    "–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
    "–£—á–∞—Å—Ç–∏–µ –≤ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞—Ö",
    "–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ –ø–µ—Ä–µ–¥ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏",
    "–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ –≤ —Å—É–¥–∞—Ö",
    "–ó–∞—â–∏—Ç–∞ –ø–æ —É–≥–æ–ª–æ–≤–Ω—ã–º/–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º –¥–µ–ª–∞–º",
    "–ò–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ—Ç–µ—Ä–ø–µ–≤—à–∏—Ö (–¥–æ–∑–Ω–∞–Ω–∏–µ, —Å–ª–µ–¥—Å—Ç–≤–∏–µ, —Å—É–¥)"
]

service_keyboard = ReplyKeyboardMarkup(
    [[service] for service in services], 
    resize_keyboard=True, 
    one_time_keyboard=True
)

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
user_data = {}  # user_id -> –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
user_threads = {}  # user_id -> thread_id –¥–ª—è OpenAI

# === –§—É–Ω–∫—Ü–∏—è: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ Google Sheets ===
def save_application_to_sheets(data: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –≤ Google –¢–∞–±–ª–∏—Ü—É"""
    if not sheet:
        logger.error("Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return None
        
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
        documents = data.get('documents', '').strip()
        if not documents or documents.lower() in ['–Ω–µ—Ç', 'no', '']:
            documents = '–Ω–µ—Ç'
            
        comment = data.get('comment', '').strip()  
        if not comment or comment.lower() in ['–Ω–µ—Ç', 'no', '']:
            comment = '–Ω–µ—Ç'
            
        source = data.get('source', '')
        if source == '–¢–µ–ª–µ–≥—Ä–∞–º':
            source = '–¢–µ–ª–µ–≥—Ä–∞–º'
        elif source == 'website':
            source = '–í–∏–¥–∂–µ—Ç'
        elif source == '–í–∏–¥–∂–µ—Ç':
            source = '–í–∏–¥–∂–µ—Ç'
        
        values = [[
            data.get('name', ''),
            data.get('phone', ''),
            data.get('service', ''),
            data.get('date', ''),
            documents,
            comment,
            source,
            datetime.now(pytz.timezone('Europe/Moscow')).strftime('%Y-%m-%d %H:%M:%S')
        ]]
        
        result = sheet.values().append(
            spreadsheetId=GOOGLE_SHEET_ID,
            range='A1',
            valueInputOption='USER_ENTERED',
            body={'values': values}
        ).execute()
        
        logger.info(f"–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Google Sheets: {data.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}")
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets: {e}")
        return None

# === –§—É–Ω–∫—Ü–∏—è: –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –≥—Ä—É–ø–ø—É ===
def send_telegram_notification(text: str, bot=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å–ª—É–∂–µ–±–Ω—ã–π Telegram —á–∞—Ç"""
    try:
        if bot:
            import asyncio
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                loop.run_until_complete(bot.initialize())
                loop.run_until_complete(bot.send_message(chat_id=TELEGRAM_GROUP_ID, text=text))
                loop.run_until_complete(bot.shutdown())
                logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram –≥—Ä—É–ø–ø—É")
            finally:
                loop.close()
        else:
            logger.warning("Bot –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# === –§—É–Ω–∫—Ü–∏—è: –æ–±—Ä–∞–±–æ—Ç–∫–∞ OpenAI function calls ===
def handle_function_call(function_name: str, arguments: dict, source: str = '–í–∏–¥–∂–µ—Ç'):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π –æ—Ç OpenAI Assistant"""
    try:
        if function_name == "save_booking_data":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            required_fields = {
                'name': '–∏–º—è –∫–ª–∏–µ–Ω—Ç–∞',
                'phone': '–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 
                'service': '–Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏',
                'datetime': '–¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏'
            }
            
            missing_fields = []
            for field, description in required_fields.items():
                value = arguments.get(field, '').strip()
                if not value:
                    missing_fields.append(description)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—É—Å—Ç—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Ö
            if missing_fields:
                missing_text = ', '.join(missing_fields)
                return {
                    "success": False,
                    "message": f"–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Ç–æ—á–Ω–∏—Ç—å: {missing_text}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ —É –∫–ª–∏–µ–Ω—Ç–∞."
                }
            
            # –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
            booking_data = {
                'name': arguments.get('name', '').strip(),
                'phone': arguments.get('phone', '').strip(),
                'service': arguments.get('service', '').strip(),
                'date': arguments.get('datetime', '').strip(),
                'documents': arguments.get('documents', '').strip() or '–Ω–µ—Ç',
                'comment': arguments.get('comments', '').strip() or '–Ω–µ—Ç',
                'source': source,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
            result = save_application_to_sheets(booking_data)
            
            if result:
                logger.info(f"–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ OpenAI function: {booking_data.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}")
                return {
                    "success": True,
                    "message": f"‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ!\n\n–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:\nüë§ –ò–º—è: {booking_data['name']}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {booking_data['phone']}\n‚öñÔ∏è –£—Å–ª—É–≥–∞: {booking_data['service']}\nüìÖ –î–∞—Ç–∞: {booking_data['date']}\n\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
                }
            else:
                return {
                    "success": False,
                    "message": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                }
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {function_name}")
            return {
                "success": False,
                "message": f"–§—É–Ω–∫—Ü–∏—è {function_name} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ {function_name}: {e}")
        return {
            "success": False,
            "message": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏"
        }

# === –§—É–Ω–∫—Ü–∏—è: —Ä–∞–±–æ—Ç–∞ —Å OpenAI Assistant ===
def get_assistant_response(message: str, thread_id: str = None, source: str = '–í–∏–¥–∂–µ—Ç'):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç OpenAI Assistant —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π function calls"""
    try:
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π thread –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        if not thread_id:
            thread = openai.beta.threads.create()
            thread_id = thread.id
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ thread
        openai.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=message
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º assistant
        run = openai.beta.threads.runs.create(
            thread_id=thread_id,
            assistant_id=OPENAI_ASSISTANT_ID
        )
        
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π function calls
        import time
        while True:
            run_status = openai.beta.threads.runs.retrieve(
                thread_id=thread_id, 
                run_id=run.id
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–±—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (function calls)
            if run_status.status == "requires_action":
                logger.info(f"üîß OpenAI —Ç—Ä–µ–±—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π")
                tool_calls = run_status.required_action.submit_tool_outputs.tool_calls
                logger.info(f"üîß –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≤—ã–∑–æ–≤–∞: {len(tool_calls)}")
                tool_outputs = []
                
                for tool_call in tool_calls:
                    function_name = tool_call.function.name
                    arguments = json.loads(tool_call.function.arguments)
                    
                    logger.info(f"OpenAI –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é: {function_name} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {arguments}")
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
                    result = handle_function_call(function_name, arguments, source)
                    
                    tool_outputs.append({
                        "tool_call_id": tool_call.id,
                        "output": json.dumps(result)
                    })
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π –æ–±—Ä–∞—Ç–Ω–æ –≤ OpenAI
                openai.beta.threads.runs.submit_tool_outputs(
                    thread_id=thread_id,
                    run_id=run.id,
                    tool_outputs=tool_outputs
                )
                
            elif run_status.status in ["completed", "failed", "cancelled"]:
                logger.info(f"üèÅ OpenAI –∑–∞–≤–µ—Ä—à–µ–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {run_status.status}")
                break
                
            time.sleep(1)
            
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        if run_status.status == "completed":
            messages = openai.beta.threads.messages.list(thread_id=thread_id)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(messages.data)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ thread")
            
            # –ë–µ—Ä—ë–º –ü–ï–†–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–∞–º–æ–µ –Ω–æ–≤–æ–µ) –æ—Ç assistant
            for i, msg in enumerate(messages.data):
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {i}: —Ä–æ–ª—å={msg.role}, —Å–æ–∑–¥–∞–Ω–æ={msg.created_at}")
                if msg.role == "assistant":
                    response_text = msg.content[0].text.value
                    logger.info(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç assistant: '{response_text[:100]}...'")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ Assistant –≥–æ–≤–æ—Ä–∏—Ç –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏
                    if "—Å–æ—Ö—Ä–∞–Ω—é –≤–∞—à—É –∑–∞–ø–∏—Å—å" in response_text.lower() or "–≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã" in response_text.lower():
                        logger.info("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å, –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ thread")
                        try:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π thread
                            booking_data = extract_booking_data_from_thread(messages.data)
                            if booking_data:
                                logger.info(f"üìù –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏: {booking_data}")
                                success = save_application_to_sheets(booking_data)
                                if success:
                                    logger.info("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Google Sheets –∏–∑ –≤–µ–±-–≤–∏–¥–∂–µ—Ç–∞")
                                else:
                                    logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets")
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–∏: {e}")
                    
                    return response_text, thread_id
                    
        logger.error(f"OpenAI Assistant –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {run_status.status}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.", thread_id
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OpenAI Assistant: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", thread_id

def extract_booking_data_from_thread(messages):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π thread"""
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_messages = []
        for msg in reversed(messages):  # –û—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
            if msg.role == "user":
                user_messages.append(msg.content[0].text.value)
        
        logger.info(f"üîç –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_messages}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ (–ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞)
        booking_data = {
            'name': '',
            'phone': '',
            'service': '',
            'date': '',
            'documents': '–Ω–µ—Ç',
            'comment': '–Ω–µ—Ç',
            'source': '–í–∏–¥–∂–µ—Ç'
        }
        
        # –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        for i, msg in enumerate(user_messages):
            msg_lower = msg.lower().strip()
            
            # –ò—â–µ–º –∏–º—è (–Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä, –Ω–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞)
            if not booking_data['name'] and not any(char.isdigit() for char in msg) and len(msg.split()) <= 3:
                if msg_lower not in ['–¥–∞', '–Ω–µ—Ç', '–¥–∞, —Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è', '—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è', '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è']:
                    booking_data['name'] = msg.strip()
                    logger.info(f"üìù –ù–∞–π–¥–µ–Ω–æ –∏–º—è: {booking_data['name']}")
            
            # –ò—â–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω (—Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã –∏ –¥–ª–∏–Ω–Ω—ã–π)
            if not booking_data['phone'] and any(char.isdigit() for char in msg) and len(msg) >= 7:
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
                digits = ''.join(filter(str.isdigit, msg))
                if len(digits) >= 7:
                    booking_data['phone'] = msg.strip()
                    logger.info(f"üì± –ù–∞–π–¥–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω: {booking_data['phone']}")
            
            # –ò—â–µ–º –¥–∞—Ç—É (—Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã)
            if not booking_data['date'] and any(char.isdigit() for char in msg):
                if any(pattern in msg_lower for pattern in ['.', '/', '–Ω–æ—è–±—Ä', '–¥–µ–∫–∞–±—Ä', '—è–Ω–≤–∞—Ä', '—Ñ–µ–≤—Ä', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª', '–º–∞–π', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä', '–æ–∫—Ç—è–±—Ä']):
                    booking_data['date'] = msg.strip()
                    logger.info(f"üìÖ –ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞: {booking_data['date']}")
            
            # –ò—â–µ–º —É—Å–ª—É–≥—É (–¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –Ω–µ –∏–º—è, –Ω–µ —Ç–µ–ª–µ—Ñ–æ–Ω, –Ω–µ –¥–∞—Ç–∞)
            if not booking_data['service'] and len(msg) > 10:
                if not any(char.isdigit() for char in msg) or '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è' in msg_lower or '–∞–¥–≤–æ–∫–∞—Ç' in msg_lower or '—Å—É–¥' in msg_lower:
                    if msg_lower not in ['–¥–∞, —Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è', '—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è']:
                        booking_data['service'] = msg.strip()
                        logger.info(f"‚öñÔ∏è –ù–∞–π–¥–µ–Ω–∞ —É—Å–ª—É–≥–∞: {booking_data['service']}")
        
        # –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        for i, msg in enumerate(user_messages):
            msg_lower = msg.lower().strip()
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–º–µ–Ω–µ–º, —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º, —É—Å–ª—É–≥–æ–π –∏–ª–∏ –¥–∞—Ç–æ–π
            if (msg != booking_data['name'] and msg != booking_data['phone'] and 
                msg != booking_data['service'] and msg != booking_data['date']):
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã
                if ('–ø–∞—Å–ø–æ—Ä—Ç' in msg_lower or '–¥–æ–∫—É–º–µ–Ω—Ç' in msg_lower or '—Å–ø—Ä–∞–≤–∫' in msg_lower or 
                    '—Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ' in msg_lower or '—É–¥–æ—Å—Ç–æ–≤–µ—Ä' in msg_lower):
                    booking_data['documents'] = msg.strip()
                    logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã: {booking_data['documents']}")
                
                # –û—Å—Ç–∞–ª—å–Ω–æ–µ –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                elif len(msg) > 3 and msg_lower not in ['–¥–∞', '–Ω–µ—Ç', '–¥–∞, —Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è', '—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è']:
                    if booking_data['comment'] == '–Ω–µ—Ç':
                        booking_data['comment'] = msg.strip()
                    else:
                        booking_data['comment'] += f"; {msg.strip()}"
                    logger.info(f"üí¨ –ù–∞–π–¥–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {msg.strip()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if booking_data['name'] and booking_data['phone']:
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏")
            return booking_data
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏: –∏–º—è={booking_data['name']}, —Ç–µ–ª–µ—Ñ–æ–Ω={booking_data['phone']}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

# === Telegram handlers ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å–∞ '–¢–≤–æ—ë –ø—Ä–∞–≤–æ'.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard
    )

async def handle_mode_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã"""
    text = update.message.text
    user_id = update.effective_user.id
    
    if text == "–ë—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å":
        user_data[user_id] = {}
        await update.message.reply_text(
            "–î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º –∑–∞—è–≤–∫—É.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
            reply_markup=ReplyKeyboardRemove()
        )
        logger.info(f"–ë—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å: –ø–µ—Ä–µ—Ö–æ–¥ –≤ STATE_NAME –¥–ª—è user_id={user_id}")
        return STATE_NAME
        
    elif text == "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
        await update.message.reply_text(
            "–í—ã –≤ —Ä–µ–∂–∏–º–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
            reply_markup=ReplyKeyboardRemove()
        )
        logger.info(f"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ—à—ë–ª –≤ —Ä–µ–∂–∏–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏")
        return ConversationHandler.END
        
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫:",
            reply_markup=main_keyboard
        )

# === FSM handlers –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–ø–∏—Å–∏ ===
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    logger.info(f"üéØ get_name –≤—ã–∑–≤–∞–Ω–∞! user_id={update.effective_user.id}, text='{update.message.text}'")
    logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ conversation: {context.user_data}")
    
    user_id = update.effective_user.id
    user_data[user_id]['name'] = update.message.text
    
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    logger.info("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥ –≤ STATE_PHONE")
    return STATE_PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    user_id = update.effective_user.id
    user_data[user_id]['phone'] = update.message.text
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=service_keyboard
    )
    return STATE_SERVICE

async def get_service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏"""
    user_id = update.effective_user.id
    selected_service = update.message.text
    
    if selected_service not in services:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=service_keyboard
        )
        return STATE_SERVICE
        
    user_data[user_id]['service'] = selected_service
    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 15:00):",
        reply_markup=ReplyKeyboardRemove()
    )
    return STATE_DATE

async def get_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    user_id = update.effective_user.id
    user_data[user_id]['date'] = update.message.text
    
    await update.message.reply_text(
        "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –Ω–∞ —Ä—É–∫–∞—Ö (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):"
    )
    return STATE_DOCUMENTS

async def get_documents(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö"""
    user_id = update.effective_user.id
    user_data[user_id]['documents'] = update.message.text
    
    await update.message.reply_text(
        "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):"
    )
    return STATE_COMMENT

async def get_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    user_id = update.effective_user.id
    user_data[user_id]['comment'] = update.message.text
    user_data[user_id]['source'] = '–¢–µ–ª–µ–≥—Ä–∞–º'  # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è FSM
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
    application_data = user_data[user_id]
    save_result = save_application_to_sheets(application_data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ save_application_to_sheets)
    documents = application_data.get('documents', '').strip()
    if not documents or documents.lower() in ['–Ω–µ—Ç', 'no', '']:
        documents = '–Ω–µ—Ç'
        
    comment = application_data.get('comment', '').strip()  
    if not comment or comment.lower() in ['–Ω–µ—Ç', 'no', '']:
        comment = '–Ω–µ—Ç'
    
    notification_text = (
        f"üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –∏–∑ Telegram:\n\n"
        f"üë§ –ò–º—è: {application_data.get('name', '')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {application_data.get('phone', '')}\n"
        f"‚öñÔ∏è –£—Å–ª—É–≥–∞: {application_data.get('service', '')}\n"
        f"üìÖ –î–∞—Ç–∞: {application_data.get('date', '')}\n"
        f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: {documents}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    )
    # send_telegram_notification –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –∏–∑ main.py —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º bot
    
    await update.message.reply_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=main_keyboard
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data.pop(user_id, None)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    user_id = update.effective_user.id
    user_data.pop(user_id, None)
    
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=main_keyboard
    )
    return ConversationHandler.END

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ ===
async def debug_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    message = update.message.text if update.message else "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"
    logger.info(f"üîç DEBUG: –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id={user_id}, text='{message}'")
    logger.info(f"üîç DEBUG: —Å–æ—Å—Ç–æ—è–Ω–∏–µ context.user_data={context.user_data}")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π ===
async def consultation_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π —á–µ—Ä–µ–∑ OpenAI Assistant"""
    user_id = update.effective_user.id
    message = update.message.text
    
    logger.info(f"üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ—Ç user_id={user_id}, message='{message}'")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º thread_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
        thread_id = user_threads.get(user_id)
        logger.info(f"Thread ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {thread_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI Assistant
        logger.info("–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ OpenAI Assistant...")
        answer, new_thread_id = get_assistant_response(message, thread_id, '–¢–µ–ª–µ–≥—Ä–∞–º')
        user_threads[user_id] = new_thread_id
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI: –¥–ª–∏–Ω–∞ {len(answer)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"–ù–æ–≤—ã–π thread_id: {new_thread_id}")
        
        await update.message.reply_text(answer)
        logger.info("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ consultation_handler: {e}", exc_info=True)
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )

# === –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è main.py ===
__all__ = [
    'start', 'handle_mode_choice', 'get_name', 'get_phone', 'get_service',
    'get_date', 'get_documents', 'get_comment', 'cancel', 'consultation_handler',
    'STATE_NAME', 'STATE_PHONE', 'STATE_SERVICE', 'STATE_DATE', 'STATE_DOCUMENTS', 'STATE_COMMENT',
    'bot', 'logger', 'NGROK_URL', 'save_application_to_sheets', 'get_assistant_response'
]
